nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
d1.kknn = kknn(pass_fail~.-id-G3-pass_fail-grades, d1.train, d1.test, k=31, kernel = "triangular")
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d1.kknn)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
d1.kknn = kknn(pass_fail~.-id-G3-G1-pass_fail-grades, d1.train, d1.test, k=31, kernel = "triangular")
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d1.kknn)
}
j
library(BBmisc)
d2$age <- normalize(d2$age, method="standardize")
d2$absences <- normalize(d2$absences, method="standardize")
d2$G1 <- normalize(d2$G1, method="standardize")
d2$G2 <- normalize(d2$G2, method="standardize")
library(kknn)
Best_k = replicate(50,0)
Accuracy = replicate(50,0) # Accuracy of each k
nfolds = ceiling(d2.length/10)
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
for(nn in 1:50){ #no. of neighbor
d2.kknn = kknn(pass_fail~.-id-G3-pass_fail-grades, d2.train, d2.test, k=nn, kernel = "triangular")
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[nn] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
Best_K_in_CurrentSet = which(Accuracy==max(Accuracy))
for(k in Best_K_in_CurrentSet){
Best_k[k] = Best_k[k] + 1
}
}
plot(1:50,Best_k,xlab = "k", ylab= "Best_k")
result = data.frame(1:50,Best_k)
write.csv(result,'Best_k_for_KNNd2.csv')
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
d2.kknn = kknn(pass_fail~.-id-G3-G1-pass_fail-grades, d2.train, d2.test, k=31, kernel = "triangular")
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.kknn)
}
j
Best_k
plot(1:50,Best_k,xlab = "No.of.k", ylab= "Frequency")
result = data.frame(1:50,Best_k)
View(result)
result = data.frame(Best_k)
View(result)
Best_k = replicate(50,0)
Accuracy = replicate(50,0) # Accuracy of each k
nfolds = ceiling(d2.length/10)
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
for(nn in 1:50){ #no. of neighbor
d2.kknn = kknn(pass_fail~.-id-G3-pass_fail-grades, d2.train, d2.test, k=nn, kernel = "triangular")
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[nn] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
Best_K_in_CurrentSet = which(Accuracy==max(Accuracy))
for(k in Best_K_in_CurrentSet){
Best_k[k] = Best_k[k] + 1
}
}
plot(1:50,Best_k,xlab = "No.of.k", ylab= "Frequency")
result = data.frame(Best_k)
write.csv(result,'Best_k_for_KNNd2_2nd_time.csv')
View(result)
?kknn
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
d2.kknn = kknn(pass_fail~.-id-G3-pass_fail-grades, d2.train, d2.test, k=12)
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.kknn)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
d2.kknn = kknn(pass_fail~.-id-G3-G2-pass_fail-grades, d2.train, d2.test, k=12)
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.kknn)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
d2.kknn = kknn(pass_fail~.-id-G3-G2-G1-pass_fail-grades, d2.train, d2.test, k=12)
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.kknn)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
d2.kknn = kknn(pass_fail~.-id-G3-G1-pass_fail-grades, d2.train, d2.test, k=12)
fit = fitted(d2.kknn)
perform <- table(fit, d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.kknn)
}
j
setwd("D:/Git/Student-Predictive-Modelling/student")
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d1.length = dim(d1)[1]
id = 1:d1.length
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
d1$grades <- cut(d1$G3, breaks=c(-1,9,11,13,15,20),labels=c("F","D","C","B","A"))
colnames(d1)
sapply(d1,class)
d2.length = dim(d2)[1]
id = 1:d2.length
pass_fail = as.factor(d2$G3 >= 10)
d2 = data.frame(id,d2,pass_fail)
d2$grades <- cut(d2$G3, breaks=c(-1,9,11,13,15,20),labels=c("F","D","C","B","A"))
colnames(d2)
sapply(d2,class)
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
d1$pass_fail = ifelse(d1$G3>=10,0,1)
library(gbm)
#Boosting
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
d1.boosting=gbm(pass_fail~.-id-G3-pass_fail-grades,data = d1.train,distribution="bernoulli",n.trees=5000,interaction.depth=4)
boost.probs=predict(d1.boosting,newdata=d1.test,type="response",n.trees=5000)
boost.pred=rep(0,dim(d1.test)[1])
boost.pred[boost.probs>=0.5]=1
perform <- table(boost.pred,d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d1.boosting)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
d1$pass_fail = ifelse(d1$G3>=10,0,1)
library(gbm)
#Boosting
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
d1.boosting=gbm(pass_fail~.-id-G3-G2-G1-pass_fail-grades,data = d1.train,distribution="bernoulli",n.trees=5000,interaction.depth=4)
boost.probs=predict(d1.boosting,newdata=d1.test,type="response",n.trees=5000)
boost.pred=rep(0,dim(d1.test)[1])
boost.pred[boost.probs>=0.5]=1
perform <- table(boost.pred,d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d1.boosting)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
d1$pass_fail = ifelse(d1$G3>=10,0,1)
library(gbm)
#Boosting
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
d1.boosting=gbm(pass_fail~.-id-G3-G1-pass_fail-grades,data = d1.train,distribution="bernoulli",n.trees=5000,interaction.depth=4)
boost.probs=predict(d1.boosting,newdata=d1.test,type="response",n.trees=5000)
boost.pred=rep(0,dim(d1.test)[1])
boost.pred[boost.probs>=0.5]=1
perform <- table(boost.pred,d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d1.boosting)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
d2$pass_fail = ifelse(d2$G3>=10,0,1)
library(gbm)
#Boosting
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
d2.boosting=gbm(pass_fail~.-id-G3-G1-pass_fail-grades,data = d2.train,distribution="bernoulli",n.trees=5000,interaction.depth=4)
boost.probs=predict(d2.boosting,newdata=d2.test,type="response",n.trees=5000)
boost.pred=rep(0,dim(d2.test)[1])
boost.pred[boost.probs>=0.5]=1
perform <- table(boost.pred,d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.boosting)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
library(tree)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
tree.d1=tree(pass_fail~.-id-G3-G1-pass_fail-grades,d1.train)
tree.pred=predict(tree.d1,d1.test,type="class")
perform <- table(tree.pred, d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.boosting)
}
j
#Summary of last tree.
summary(tree.d1)
plot(tree.d1)
text(tree.d1,cex=0.8)
tree.d1
table(tree.pred,d1.test$pass_fail)
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
library(tree)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
tree.d1=tree(pass_fail~.-id-G3-G1-pass_fail-grades,d1.train)
tree.pred=predict(tree.d1,d1.test,type="class")
perform <- table(tree.pred, d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(d2.boosting)
}
j
setwd("D:/Git/Student-Predictive-Modelling/student")
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d1.length = dim(d1)[1]
id = 1:d1.length
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
d1$grades <- cut(d1$G3, breaks=c(-1,9,11,13,15,20),labels=c("F","D","C","B","A"))
colnames(d1)
sapply(d1,class)
d2.length = dim(d2)[1]
id = 1:d2.length
pass_fail = as.factor(d2$G3 >= 10)
d2 = data.frame(id,d2,pass_fail)
d2$grades <- cut(d2$G3, breaks=c(-1,9,11,13,15,20),labels=c("F","D","C","B","A"))
colnames(d2)
sapply(d2,class)
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d1)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
library(tree)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d1.test = d1[test_i,]
d1.train = d1[-test_i,]
tree.d1=tree(pass_fail~.-id-G3-G1-pass_fail-grades,d1.train)
tree.pred=predict(tree.d1,d1.test,type="class")
perform <- table(tree.pred, d1.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(tree.d1)
}
j
nfolds = 5
j = replicate(10,0)
for(i in 1:10){
foldPosition = sample(rep(1:nfolds, length.out = dim(d2)[1]))
Accuracy = replicate(nfolds,0)
Recall.No = replicate(nfolds,0)
Recall.Yes = replicate(nfolds,0)
Precision.No = replicate(nfolds,0)
Precision.Yes = replicate(nfolds,0)
library(tree)
for(k in 1:nfolds){ # k folds
test_i = which(foldPosition == k)
d2.test = d2[test_i,]
d2.train = d2[-test_i,]
tree.d2=tree(pass_fail~.-id-G3-G1-pass_fail-grades,d2.train)
tree.pred=predict(tree.d2,d2.test,type="class")
perform <- table(tree.pred, d2.test$pass_fail)
Accuracy[k] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.No[k] <- perform[1,1]/sum(perform[,1])
Recall.Yes[k] <- perform[2,2]/sum(perform[,2])
Precision.No[k] <- perform[1,1]/sum(perform[1,])
Precision.Yes[k] <- perform[2,2]/sum(perform[2,])
}
j[i] = mean(Accuracy)
remove(tree.d2)
}
j
