}
Accuracy
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
View(d1.test)
x <- 1:40
Accuracy = 1:40
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
print(val)
}
Accuracy
perform
plot(x,Accuracy)
x <- 1:40
Accuracy = 1:40
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
print(val)
}
Accuracy
plot(x,Accuracy)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
x <- 1:40
Accuracy = 1:40
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
print(val)
}
Accuracy
plot(x,Accuracy)
x <- 1:40
Accuracy = 1:40
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
print(val)
}
Accuracy
plot(x,Accuracy)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
x <- 1:40
Accuracy = 1:40
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
print(val)
}
Accuracy
plot(x,Accuracy)
max(Accuracy)
(j,k) = max(Accuracy)
?max
which(Accuracy==max(Accuracy), arr.ind=TRUE)
which(Accuracy==max(Accuracy))
Best_k = replicate(40,0)
"
id = 1:dim(d1)[1]
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
library(splitstackshape)
library(dplyr)
library(kknn)
x <- 1:40
Best_k = replicate(40,0)
Accuracy = 1:40
Accuracy = replicate(40,0)
for(val in x){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
d1=read.table("student-mat.csv",sep=";",header=TRUE)
id = 1:dim(d1)[1]
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
library(splitstackshape)
library(dplyr)
library(kknn)
x <- 1:40
Best_k = replicate(40,0)
Accuracy = replicate(40,0)
for(val in x){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
plot(x,Best_k)
Best_k
x <- 1:40
Best_k = replicate(40,0)
Accuracy = replicate(40,0)
for(val in x){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
current_k = which(Accuracy==max(Accuracy))
print(current_k)
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
plot(x,Best_k)
Accuracy
library(kknn)
x <- 1:40
Best_k = replicate(40,0)
Accuracy = replicate(40,0)
for(val in x){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
current_k = which(Accuracy==max(Accuracy))
print(current_k)
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
library(kknn)
x <- 1:40
x <- 1:40
r <- 1:100
Best_k = replicate(40,0)
Accuracy = replicate(40,0) # Accuracy of each k
for(repeat in r){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
current_k = which(Accuracy==max(Accuracy))
print(current_k)
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
}
for(repeat in r)
library(kknn)
x <- 1:40
r <- 1:100
Best_k = replicate(40,0)
Accuracy = replicate(40,0) # Accuracy of each k
for(re in r){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
current_k = which(Accuracy==max(Accuracy))
print(current_k)
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
}
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,]
}
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
plot(x,Best_k)
Best_k
Accuracy
#for(re in r){
#d1.train <- stratified(d1,"pass_fail",size=0.7)
#d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,]
}
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
#}
plot(x,Best_k)
Best_k
Accuracy
d1=read.table("student-mat.csv",sep=";",header=TRUE)
id = 1:dim(d1)[1]
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
library(splitstackshape)
library(dplyr)
library(kknn)
x <- 1:40
r <- 1:100
Best_k = replicate(40,0)
Accuracy = replicate(40,0) # Accuracy of each k
for(re in r){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
plot(x,Best_k)
plot(x,Best_k)
plot(x,Best_k)
plot(x,Best_k)
Best_k
#for(re in r){
#d1.train <- stratified(d1,"pass_fail",size=0.7)
#d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
current_k = which(Accuracy==max(Accuracy))
Accuracy
Accuracy = replicate(40,0) # Accuracy of each k
#for(re in r){
#d1.train <- stratified(d1,"pass_fail",size=0.7)
#d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
current_k = which(Accuracy==max(Accuracy))
Accuracy
x <- 1:40
r <- 1:100
Best_k = replicate(40,0)
Accuracy = replicate(40,0) # Accuracy of each k
for(re in r){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
plot(x,Best_k)
Best_k
library(kknn)
x <- 1:40
r <- 1:1000
Best_k = replicate(40,0)
Accuracy = replicate(40,0) # Accuracy of each k
for(re in r){
d1.train <- stratified(d1,"pass_fail",size=0.7)
d1.test <- anti_join(d1, d1.train, by="id")
for(val in x){
d1.kknn = kknn(pass_fail~.-id-G3, d1.train, d1.test, k=val, kernel = "triangular")
#summary(d1.kknn)
fit = fitted(d1.kknn)
perform <- table(fit, d1.test$pass_fail)
Accuracy[val] <- sum(perform[1,1],perform[2,2])/sum(perform[,])
}
current_k = which(Accuracy==max(Accuracy))
for(k in current_k){
Best_k[k] = Best_k[k] + 1
}
}
Best_k
plot(x,Best_k)
result = data.frame(x,Best_k)
View(result)
View(result)
write.csv(result,'Best_k_for_KNN')
?plot
plot(x,Best_k,xlab = "k", ylab= "Number where k happens to be best k for current batch")
plot(x,Best_k,xlab = "k", ylab= "Best_k")
install.packages("cvTools")
?sample
Accuracy
d1=read.table("student-mat.csv",sep=";",header=TRUE)
id = 1:dim(d1)[1]
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
library(splitstackshape)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(e1071)
model.nb <- naiveBayes(tag ~ .-id, data = d1.train)
model.nb <- naiveBayes(pass_fail ~ .-id, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
Recall.1 <- perform[2,2]/sum(perform[,2])
Precision.0 <- perform[1,1]/sum(perform[1,])
Precision.1 <- perform[2,2]/sum(perform[2,])
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(e1071)
model.nb <- naiveBayes(pass_fail ~ .-id, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
Recall.1 <- perform[2,2]/sum(perform[,2])
Precision.0 <- perform[1,1]/sum(perform[1,])
Precision.1 <- perform[2,2]/sum(perform[2,])
?naiveBayes
model.nb <- naiveBayes(pass_fail ~ .-id-G3, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
Recall.1 <- perform[2,2]/sum(perform[,2])
Precision.0 <- perform[1,1]/sum(perform[1,])
Precision.1 <- perform[2,2]/sum(perform[2,])
library(splitstackshape)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(e1071)
model.nb <- naiveBayes(pass_fail ~ .-id-G3, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
Recall.1 <- perform[2,2]/sum(perform[,2])
Precision.0 <- perform[1,1]/sum(perform[1,])
Precision.1 <- perform[2,2]/sum(perform[2,])
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(e1071)
model.nb <- naiveBayes(pass_fail ~ .-id-G3, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
Recall.1 <- perform[2,2]/sum(perform[,2])
library(splitstackshape)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(e1071)
model.nb <- naiveBayes(pass_fail ~ .-id-G3, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
d1 = data.frame(id,d1,pass_fail)
library(splitstackshape)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(e1071)
model.nb <- naiveBayes(pass_fail ~ .-id-G3, data = d1.train)
pred.nb <- predict(model.nb, newdata = d1.test)
perform <- table(pred.nb, d1.test$pass_fail)
# performance
Accuracy <- sum(perform[1,1],perform[2,2])/sum(perform[,])
Recall.0 <- perform[1,1]/sum(perform[,1])
Recall.1 <- perform[2,2]/sum(perform[,2])
Precision.0 <- perform[1,1]/sum(perform[1,])
library(tree)
library(tree)
tree.d1=tree(pass_fail~.-id-G3,d1.train)
plot(tree.d1)
text(tree.d1,cex=0.8)
library(ISLR)
attach(Carseats)
View(Carseats)
tree.d1=tree(pass_fail~.-id-G3,d1.train)
plot(tree.d1)
text(tree.d1,cex=0.8)
tree.d1
View(d1.train)
tree.d1=tree(pass_fail~.-id-G3,d1.train)
plot(tree.d1)
text(tree.d1,cex=0.8)
tree.d1
summary(tree.d1)
library(ISLR)
attach(Carseats)
View(Carseats)
# to create variable "High" - "Yes" if "Sales">8 and "No" if "Sales"<=8
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
View(Carseats)
# prepare train set and test set
set.seed(2)
library(splitstackshape)
Carseats.train <- stratified(Carseats,"High",size=0.7)
library(dplyr)
# generate id for Carsets dataset
id <- c(1:400)
Carseats <- data.frame(Carseats,id)
View(Carseats)
Carseats.test <- anti_join(Carseats, Carseats.train, by="id")
View(Carseats.test)
# build a tree model using "High" as response.
# Note: "Sales" should be taken out
library(tree)
tree.carseats=tree(High~.-Sales-id,Carseats.train)
View(Carseats.train)
tree.carseats=tree(High~.-Sales,Carseats.train)
plot(tree.carseats)
text(tree.carseats,cex=0.8)
summary(tree.carseats)
tree.d1=tree(pass_fail~.-id-G3,d1.train)
summary(tree.d1)
tree.d1=tree(pass_fail~.-id-G3-pass_fail,d1.train)
summary(tree.d1)
sapply(d1.train,class)
d1=read.table("student-mat.csv",sep=";",header=TRUE)
id = 1:dim(d1)[1]
pass_fail = as.factor(d1$G3 >= 10)
d1 = data.frame(id,d1,pass_fail)
library(splitstackshape)
d1.train <- stratified(d1,"pass_fail",size=0.7)
library(dplyr)
d1.test <- anti_join(d1, d1.train, by="id")
library(tree)
tree.d1=tree(pass_fail~.-id-G3-pass_fail,d1.train)
tree.d1=tree(pass_fail~.-id-G3,d1.train)
summary(tree.d1)
plot(tree.d1)
text(tree.d1,cex=0.8)
tree.d1
tree.pred=predict(tree.d1,d1.test,type="class")
table(tree.pred,Carseats.test$High)
table(tree.pred,d1.test$pass_fail)
